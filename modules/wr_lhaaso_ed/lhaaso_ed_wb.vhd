---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for Module for LHAASO Electron Detector
---------------------------------------------------------------------------------------
-- File           : lhaaso_ed_wb.vhd
-- Author         : auto-generated by wbgen2 from lhaaso_ed_wb.wb
-- Created        : Thu Mar 24 18:04:04 2016
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE lhaaso_ed_wb.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity lhaaso_ed_wb is
  port (
    rst_n_i                                  : in     std_logic;
    clk_sys_i                                : in     std_logic;
    wb_adr_i                                 : in     std_logic_vector(0 downto 0);
    wb_dat_i                                 : in     std_logic_vector(31 downto 0);
    wb_dat_o                                 : out    std_logic_vector(31 downto 0);
    wb_cyc_i                                 : in     std_logic;
    wb_sel_i                                 : in     std_logic_vector(3 downto 0);
    wb_stb_i                                 : in     std_logic;
    wb_we_i                                  : in     std_logic;
    wb_ack_o                                 : out    std_logic;
    wb_stall_o                               : out    std_logic;
    refclk_i                                 : in     std_logic;
-- Port for asynchronous (clock: refclk_i) std_logic_vector field: 'Temperature register' in reg: 'Board temperature register'
    lhaaso_ed_temperature_o                  : out    std_logic_vector(31 downto 0);
-- Port for asynchronous (clock: refclk_i) BIT field: 'Temperature Valid register' in reg: 'Temperature Valid Register'
    lhaaso_ed_tempvalid_o                    : out    std_logic
  );
end lhaaso_ed_wb;

architecture syn of lhaaso_ed_wb is

signal lhaaso_ed_temperature_int                : std_logic_vector(31 downto 0);
signal lhaaso_ed_temperature_swb                : std_logic      ;
signal lhaaso_ed_temperature_swb_delay          : std_logic      ;
signal lhaaso_ed_temperature_swb_s0             : std_logic      ;
signal lhaaso_ed_temperature_swb_s1             : std_logic      ;
signal lhaaso_ed_temperature_swb_s2             : std_logic      ;
signal lhaaso_ed_tempvalid_int                  : std_logic      ;
signal lhaaso_ed_tempvalid_sync0                : std_logic      ;
signal lhaaso_ed_tempvalid_sync1                : std_logic      ;
signal ack_sreg                                 : std_logic_vector(9 downto 0);
signal rddata_reg                               : std_logic_vector(31 downto 0);
signal wrdata_reg                               : std_logic_vector(31 downto 0);
signal bwsel_reg                                : std_logic_vector(3 downto 0);
signal rwaddr_reg                               : std_logic_vector(0 downto 0);
signal ack_in_progress                          : std_logic      ;
signal wr_int                                   : std_logic      ;
signal rd_int                                   : std_logic      ;
signal allones                                  : std_logic_vector(31 downto 0);
signal allzeros                                 : std_logic_vector(31 downto 0);

begin
-- Some internal signals assignments. For (foreseen) compatibility with other bus standards.
  wrdata_reg <= wb_dat_i;
  bwsel_reg <= wb_sel_i;
  rd_int <= wb_cyc_i and (wb_stb_i and (not wb_we_i));
  wr_int <= wb_cyc_i and (wb_stb_i and wb_we_i);
  allones <= (others => '1');
  allzeros <= (others => '0');
-- 
-- Main register bank access process.
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      ack_sreg <= "0000000000";
      ack_in_progress <= '0';
      rddata_reg <= "00000000000000000000000000000000";
      lhaaso_ed_temperature_int <= "00000000000000000000000000000000";
      lhaaso_ed_temperature_swb <= '0';
      lhaaso_ed_temperature_swb_delay <= '0';
      lhaaso_ed_tempvalid_int <= '0';
    elsif rising_edge(clk_sys_i) then
-- advance the ACK generator shift register
      ack_sreg(8 downto 0) <= ack_sreg(9 downto 1);
      ack_sreg(9) <= '0';
      if (ack_in_progress = '1') then
        if (ack_sreg(0) = '1') then
          ack_in_progress <= '0';
        else
          lhaaso_ed_temperature_swb <= lhaaso_ed_temperature_swb_delay;
          lhaaso_ed_temperature_swb_delay <= '0';
        end if;
      else
        if ((wb_cyc_i = '1') and (wb_stb_i = '1')) then
          case rwaddr_reg(0) is
          when '0' => 
            if (wb_we_i = '1') then
              lhaaso_ed_temperature_int <= wrdata_reg(31 downto 0);
              lhaaso_ed_temperature_swb <= '1';
              lhaaso_ed_temperature_swb_delay <= '1';
            end if;
            rddata_reg(31 downto 0) <= lhaaso_ed_temperature_int;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when '1' => 
            if (wb_we_i = '1') then
              lhaaso_ed_tempvalid_int <= wrdata_reg(0);
            end if;
            rddata_reg(0) <= lhaaso_ed_tempvalid_int;
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when others =>
-- prevent the slave from hanging the bus on invalid address
            ack_in_progress <= '1';
            ack_sreg(0) <= '1';
          end case;
        end if;
      end if;
    end if;
  end process;
  
  
-- Drive the data output bus
  wb_dat_o <= rddata_reg;
-- Temperature register
-- asynchronous std_logic_vector register : Temperature register (type RW/RO, refclk_i <-> clk_sys_i)
  process (refclk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      lhaaso_ed_temperature_swb_s0 <= '0';
      lhaaso_ed_temperature_swb_s1 <= '0';
      lhaaso_ed_temperature_swb_s2 <= '0';
      lhaaso_ed_temperature_o <= "00000000000000000000000000000000";
    elsif rising_edge(refclk_i) then
      lhaaso_ed_temperature_swb_s0 <= lhaaso_ed_temperature_swb;
      lhaaso_ed_temperature_swb_s1 <= lhaaso_ed_temperature_swb_s0;
      lhaaso_ed_temperature_swb_s2 <= lhaaso_ed_temperature_swb_s1;
      if ((lhaaso_ed_temperature_swb_s2 = '0') and (lhaaso_ed_temperature_swb_s1 = '1')) then
        lhaaso_ed_temperature_o <= lhaaso_ed_temperature_int;
      end if;
    end if;
  end process;
  
  
-- Temperature Valid register
-- synchronizer chain for field : Temperature Valid register (type RW/RO, clk_sys_i <-> refclk_i)
  process (refclk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      lhaaso_ed_tempvalid_o <= '0';
      lhaaso_ed_tempvalid_sync0 <= '0';
      lhaaso_ed_tempvalid_sync1 <= '0';
    elsif rising_edge(refclk_i) then
      lhaaso_ed_tempvalid_sync0 <= lhaaso_ed_tempvalid_int;
      lhaaso_ed_tempvalid_sync1 <= lhaaso_ed_tempvalid_sync0;
      lhaaso_ed_tempvalid_o <= lhaaso_ed_tempvalid_sync1;
    end if;
  end process;
  
  
  rwaddr_reg <= wb_adr_i;
  wb_stall_o <= (not ack_sreg(0)) and (wb_stb_i and wb_cyc_i);
-- ACK signal generation. Just pass the LSB of ACK counter.
  wb_ack_o <= ack_sreg(0);
end syn;
