---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for CUTE WR TDC Control Module
---------------------------------------------------------------------------------------
-- File           : tdc_cm_wb.vhd
-- Author         : auto-generated by wbgen2 from tdc_cm_wb.wb
-- Created        : Tue Apr 19 16:13:14 2016
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE tdc_cm_wb.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity tdc_cm_wb is
  port (
    rst_n_i                                  : in     std_logic;
    clk_sys_i                                : in     std_logic;
    wb_adr_i                                 : in     std_logic_vector(0 downto 0);
    wb_dat_i                                 : in     std_logic_vector(31 downto 0);
    wb_dat_o                                 : out    std_logic_vector(31 downto 0);
    wb_cyc_i                                 : in     std_logic;
    wb_sel_i                                 : in     std_logic_vector(3 downto 0);
    wb_stb_i                                 : in     std_logic;
    wb_we_i                                  : in     std_logic;
    wb_ack_o                                 : out    std_logic;
    wb_stall_o                               : out    std_logic;
    refclk_i                                 : in     std_logic;
-- Port for asynchronous (clock: refclk_i) MONOSTABLE field: 'Reset TDC' in reg: 'Control Register'
    tdccm_cr_tdc_rst_o                       : out    std_logic;
-- Port for asynchronous (clock: refclk_i) BIT field: 'Enable TDC' in reg: 'Control Register'
    tdccm_cr_tdc_en_o                        : out    std_logic;
-- Port for asynchronous (clock: refclk_i) BIT field: 'Select TDC Calibration' in reg: 'Control Register'
    tdccm_cr_cal_sel_o                       : out    std_logic;
-- Port for asynchronous (clock: refclk_i) std_logic_vector field: 'TDC channel fifo empty' in reg: 'TDC Status'
    tdccm_st_fifo_empty_ch_i                 : in     std_logic_vector(7 downto 0);
-- Port for asynchronous (clock: refclk_i) std_logic_vector field: 'TDC channel fifo full' in reg: 'TDC Status'
    tdccm_st_fifo_full_ch_i                  : in     std_logic_vector(7 downto 0);
-- Port for asynchronous (clock: refclk_i) BIT field: 'TDC buffer empty' in reg: 'TDC Status'
    tdccm_st_tdc_buf_empty_i                 : in     std_logic;
-- Port for asynchronous (clock: refclk_i) BIT field: 'TDC buffer full' in reg: 'TDC Status'
    tdccm_st_tdc_buf_full_i                  : in     std_logic
  );
end tdc_cm_wb;

architecture syn of tdc_cm_wb is

signal tdccm_cr_tdc_rst_int                     : std_logic      ;
signal tdccm_cr_tdc_rst_int_delay               : std_logic      ;
signal tdccm_cr_tdc_rst_sync0                   : std_logic      ;
signal tdccm_cr_tdc_rst_sync1                   : std_logic      ;
signal tdccm_cr_tdc_rst_sync2                   : std_logic      ;
signal tdccm_cr_tdc_en_int                      : std_logic      ;
signal tdccm_cr_tdc_en_sync0                    : std_logic      ;
signal tdccm_cr_tdc_en_sync1                    : std_logic      ;
signal tdccm_cr_cal_sel_int                     : std_logic      ;
signal tdccm_cr_cal_sel_sync0                   : std_logic      ;
signal tdccm_cr_cal_sel_sync1                   : std_logic      ;
signal tdccm_st_fifo_empty_ch_int               : std_logic_vector(7 downto 0);
signal tdccm_st_fifo_empty_ch_lwb               : std_logic      ;
signal tdccm_st_fifo_empty_ch_lwb_delay         : std_logic      ;
signal tdccm_st_fifo_empty_ch_lwb_in_progress   : std_logic      ;
signal tdccm_st_fifo_empty_ch_lwb_s0            : std_logic      ;
signal tdccm_st_fifo_empty_ch_lwb_s1            : std_logic      ;
signal tdccm_st_fifo_empty_ch_lwb_s2            : std_logic      ;
signal tdccm_st_fifo_full_ch_int                : std_logic_vector(7 downto 0);
signal tdccm_st_fifo_full_ch_lwb                : std_logic      ;
signal tdccm_st_fifo_full_ch_lwb_delay          : std_logic      ;
signal tdccm_st_fifo_full_ch_lwb_in_progress    : std_logic      ;
signal tdccm_st_fifo_full_ch_lwb_s0             : std_logic      ;
signal tdccm_st_fifo_full_ch_lwb_s1             : std_logic      ;
signal tdccm_st_fifo_full_ch_lwb_s2             : std_logic      ;
signal tdccm_st_tdc_buf_empty_sync0             : std_logic      ;
signal tdccm_st_tdc_buf_empty_sync1             : std_logic      ;
signal tdccm_st_tdc_buf_full_sync0              : std_logic      ;
signal tdccm_st_tdc_buf_full_sync1              : std_logic      ;
signal ack_sreg                                 : std_logic_vector(9 downto 0);
signal rddata_reg                               : std_logic_vector(31 downto 0);
signal wrdata_reg                               : std_logic_vector(31 downto 0);
signal bwsel_reg                                : std_logic_vector(3 downto 0);
signal rwaddr_reg                               : std_logic_vector(0 downto 0);
signal ack_in_progress                          : std_logic      ;
signal wr_int                                   : std_logic      ;
signal rd_int                                   : std_logic      ;
signal allones                                  : std_logic_vector(31 downto 0);
signal allzeros                                 : std_logic_vector(31 downto 0);

begin
-- Some internal signals assignments. For (foreseen) compatibility with other bus standards.
  wrdata_reg <= wb_dat_i;
  bwsel_reg <= wb_sel_i;
  rd_int <= wb_cyc_i and (wb_stb_i and (not wb_we_i));
  wr_int <= wb_cyc_i and (wb_stb_i and wb_we_i);
  allones <= (others => '1');
  allzeros <= (others => '0');
-- 
-- Main register bank access process.
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      ack_sreg <= "0000000000";
      ack_in_progress <= '0';
      rddata_reg <= "00000000000000000000000000000000";
      tdccm_cr_tdc_rst_int <= '0';
      tdccm_cr_tdc_rst_int_delay <= '0';
      tdccm_cr_tdc_en_int <= '0';
      tdccm_cr_cal_sel_int <= '0';
      tdccm_st_fifo_empty_ch_lwb <= '0';
      tdccm_st_fifo_empty_ch_lwb_delay <= '0';
      tdccm_st_fifo_empty_ch_lwb_in_progress <= '0';
      tdccm_st_fifo_full_ch_lwb <= '0';
      tdccm_st_fifo_full_ch_lwb_delay <= '0';
      tdccm_st_fifo_full_ch_lwb_in_progress <= '0';
    elsif rising_edge(clk_sys_i) then
-- advance the ACK generator shift register
      ack_sreg(8 downto 0) <= ack_sreg(9 downto 1);
      ack_sreg(9) <= '0';
      if (ack_in_progress = '1') then
        if (ack_sreg(0) = '1') then
          ack_in_progress <= '0';
        else
          tdccm_cr_tdc_rst_int <= tdccm_cr_tdc_rst_int_delay;
          tdccm_cr_tdc_rst_int_delay <= '0';
          tdccm_st_fifo_empty_ch_lwb <= tdccm_st_fifo_empty_ch_lwb_delay;
          tdccm_st_fifo_empty_ch_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (tdccm_st_fifo_empty_ch_lwb_in_progress = '1')) then
            rddata_reg(7 downto 0) <= tdccm_st_fifo_empty_ch_int;
            tdccm_st_fifo_empty_ch_lwb_in_progress <= '0';
          end if;
          tdccm_st_fifo_full_ch_lwb <= tdccm_st_fifo_full_ch_lwb_delay;
          tdccm_st_fifo_full_ch_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (tdccm_st_fifo_full_ch_lwb_in_progress = '1')) then
            rddata_reg(15 downto 8) <= tdccm_st_fifo_full_ch_int;
            tdccm_st_fifo_full_ch_lwb_in_progress <= '0';
          end if;
        end if;
      else
        if ((wb_cyc_i = '1') and (wb_stb_i = '1')) then
          case rwaddr_reg(0) is
          when '0' => 
            if (wb_we_i = '1') then
              tdccm_cr_tdc_rst_int <= wrdata_reg(0);
              tdccm_cr_tdc_rst_int_delay <= wrdata_reg(0);
              tdccm_cr_tdc_en_int <= wrdata_reg(1);
              tdccm_cr_cal_sel_int <= wrdata_reg(2);
            end if;
            rddata_reg(0) <= '0';
            rddata_reg(1) <= tdccm_cr_tdc_en_int;
            rddata_reg(2) <= tdccm_cr_cal_sel_int;
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(4) <= '1';
            ack_in_progress <= '1';
          when '1' => 
            if (wb_we_i = '1') then
            end if;
            if (wb_we_i = '0') then
              tdccm_st_fifo_empty_ch_lwb <= '1';
              tdccm_st_fifo_empty_ch_lwb_delay <= '1';
              tdccm_st_fifo_empty_ch_lwb_in_progress <= '1';
            end if;
            if (wb_we_i = '0') then
              tdccm_st_fifo_full_ch_lwb <= '1';
              tdccm_st_fifo_full_ch_lwb_delay <= '1';
              tdccm_st_fifo_full_ch_lwb_in_progress <= '1';
            end if;
            rddata_reg(16) <= tdccm_st_tdc_buf_empty_sync1;
            rddata_reg(17) <= tdccm_st_tdc_buf_full_sync1;
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when others =>
-- prevent the slave from hanging the bus on invalid address
            ack_in_progress <= '1';
            ack_sreg(0) <= '1';
          end case;
        end if;
      end if;
    end if;
  end process;
  
  
-- Drive the data output bus
  wb_dat_o <= rddata_reg;
-- Reset TDC
  process (refclk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      tdccm_cr_tdc_rst_o <= '0';
      tdccm_cr_tdc_rst_sync0 <= '0';
      tdccm_cr_tdc_rst_sync1 <= '0';
      tdccm_cr_tdc_rst_sync2 <= '0';
    elsif rising_edge(refclk_i) then
      tdccm_cr_tdc_rst_sync0 <= tdccm_cr_tdc_rst_int;
      tdccm_cr_tdc_rst_sync1 <= tdccm_cr_tdc_rst_sync0;
      tdccm_cr_tdc_rst_sync2 <= tdccm_cr_tdc_rst_sync1;
      tdccm_cr_tdc_rst_o <= tdccm_cr_tdc_rst_sync2 and (not tdccm_cr_tdc_rst_sync1);
    end if;
  end process;
  
  
-- Enable TDC
-- synchronizer chain for field : Enable TDC (type RW/RO, clk_sys_i <-> refclk_i)
  process (refclk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      tdccm_cr_tdc_en_o <= '0';
      tdccm_cr_tdc_en_sync0 <= '0';
      tdccm_cr_tdc_en_sync1 <= '0';
    elsif rising_edge(refclk_i) then
      tdccm_cr_tdc_en_sync0 <= tdccm_cr_tdc_en_int;
      tdccm_cr_tdc_en_sync1 <= tdccm_cr_tdc_en_sync0;
      tdccm_cr_tdc_en_o <= tdccm_cr_tdc_en_sync1;
    end if;
  end process;
  
  
-- Select TDC Calibration
-- synchronizer chain for field : Select TDC Calibration (type RW/RO, clk_sys_i <-> refclk_i)
  process (refclk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      tdccm_cr_cal_sel_o <= '0';
      tdccm_cr_cal_sel_sync0 <= '0';
      tdccm_cr_cal_sel_sync1 <= '0';
    elsif rising_edge(refclk_i) then
      tdccm_cr_cal_sel_sync0 <= tdccm_cr_cal_sel_int;
      tdccm_cr_cal_sel_sync1 <= tdccm_cr_cal_sel_sync0;
      tdccm_cr_cal_sel_o <= tdccm_cr_cal_sel_sync1;
    end if;
  end process;
  
  
-- TDC channel fifo empty
-- asynchronous std_logic_vector register : TDC channel fifo empty (type RO/WO, refclk_i <-> clk_sys_i)
  process (refclk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      tdccm_st_fifo_empty_ch_lwb_s0 <= '0';
      tdccm_st_fifo_empty_ch_lwb_s1 <= '0';
      tdccm_st_fifo_empty_ch_lwb_s2 <= '0';
      tdccm_st_fifo_empty_ch_int <= "00000000";
    elsif rising_edge(refclk_i) then
      tdccm_st_fifo_empty_ch_lwb_s0 <= tdccm_st_fifo_empty_ch_lwb;
      tdccm_st_fifo_empty_ch_lwb_s1 <= tdccm_st_fifo_empty_ch_lwb_s0;
      tdccm_st_fifo_empty_ch_lwb_s2 <= tdccm_st_fifo_empty_ch_lwb_s1;
      if ((tdccm_st_fifo_empty_ch_lwb_s1 = '1') and (tdccm_st_fifo_empty_ch_lwb_s2 = '0')) then
        tdccm_st_fifo_empty_ch_int <= tdccm_st_fifo_empty_ch_i;
      end if;
    end if;
  end process;
  
  
-- TDC channel fifo full
-- asynchronous std_logic_vector register : TDC channel fifo full (type RO/WO, refclk_i <-> clk_sys_i)
  process (refclk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      tdccm_st_fifo_full_ch_lwb_s0 <= '0';
      tdccm_st_fifo_full_ch_lwb_s1 <= '0';
      tdccm_st_fifo_full_ch_lwb_s2 <= '0';
      tdccm_st_fifo_full_ch_int <= "00000000";
    elsif rising_edge(refclk_i) then
      tdccm_st_fifo_full_ch_lwb_s0 <= tdccm_st_fifo_full_ch_lwb;
      tdccm_st_fifo_full_ch_lwb_s1 <= tdccm_st_fifo_full_ch_lwb_s0;
      tdccm_st_fifo_full_ch_lwb_s2 <= tdccm_st_fifo_full_ch_lwb_s1;
      if ((tdccm_st_fifo_full_ch_lwb_s1 = '1') and (tdccm_st_fifo_full_ch_lwb_s2 = '0')) then
        tdccm_st_fifo_full_ch_int <= tdccm_st_fifo_full_ch_i;
      end if;
    end if;
  end process;
  
  
-- TDC buffer empty
-- synchronizer chain for field : TDC buffer empty (type RO/WO, refclk_i -> clk_sys_i)
  process (refclk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      tdccm_st_tdc_buf_empty_sync0 <= '0';
      tdccm_st_tdc_buf_empty_sync1 <= '0';
    elsif rising_edge(refclk_i) then
      tdccm_st_tdc_buf_empty_sync0 <= tdccm_st_tdc_buf_empty_i;
      tdccm_st_tdc_buf_empty_sync1 <= tdccm_st_tdc_buf_empty_sync0;
    end if;
  end process;
  
  
-- TDC buffer full
-- synchronizer chain for field : TDC buffer full (type RO/WO, refclk_i -> clk_sys_i)
  process (refclk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      tdccm_st_tdc_buf_full_sync0 <= '0';
      tdccm_st_tdc_buf_full_sync1 <= '0';
    elsif rising_edge(refclk_i) then
      tdccm_st_tdc_buf_full_sync0 <= tdccm_st_tdc_buf_full_i;
      tdccm_st_tdc_buf_full_sync1 <= tdccm_st_tdc_buf_full_sync0;
    end if;
  end process;
  
  
  rwaddr_reg <= wb_adr_i;
  wb_stall_o <= (not ack_sreg(0)) and (wb_stb_i and wb_cyc_i);
-- ACK signal generation. Just pass the LSB of ACK counter.
  wb_ack_o <= ack_sreg(0);
end syn;
